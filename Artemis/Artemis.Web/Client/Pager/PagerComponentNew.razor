<div class="container">
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @GetActiveClass(1)">
                <a class="page-link" href="#" @onclick="@(async () => await ChangePage(1))">1</a>
            </li>

            @if (ShouldHaveLeftNeighbour())
            {
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Previous" @onclick="@(async () => await ChangePage(_currentPage - NumberOfNeighbours))">
                        <span aria-hidden="true" >
                            &laquo;
                        </span>
                    </a>
                </li>
            }

            @for (int i = 0, pageId = GetLeftValue(); i < GetRightValue(); i++, pageId ++)
            {
                var internalLoopPageId = pageId;

                <li class="page-item @GetActiveClass(pageId)">
                    <a class="page-link" href="#" @onclick="@(async () => await ChangePage(internalLoopPageId))">@pageId</a>
                </li>
            }

            @if (ShouldHaveRightNeighbour())
            {
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Previous" @onclick="@(async () => await ChangePage(_currentPage + NumberOfNeighbours))">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            }

            <li class="page-item @GetActiveClass(_numberOfPages)">
                <a class="page-link" href="#" @onclick="@(async () => await ChangePage(_numberOfPages))">@_numberOfPages</a>
            </li>
        </ul>
    </nav>
</div>

@code {
    private int _currentPage = 1;
    private int _numberOfPages = 0;

    [Parameter]
    public double ItemsPerPage { get; set; }

    [Parameter]
    public double TotalItems { get; set; }

    [Parameter]
    public int NumberOfNeighbours { get; set; }

    [Parameter]
    public Func<int, Task> OnItemClick { get; set; }

    protected override void OnInitialized()
    {
        _numberOfPages = (int) Math.Ceiling(TotalItems / ItemsPerPage);
    }

    private string GetActiveClass(int page)
    {
        return _currentPage == page ? "active" : string.Empty;
    }

    private bool ShouldHaveLeftNeighbour()
    {
        var pageBeforeNeighbour = NumberOfNeighbours + 2;
        var pageNumberToStartPrintingNeighbours = pageBeforeNeighbour + 1;

        return _currentPage >= pageNumberToStartPrintingNeighbours;
    }

    private bool ShouldHaveRightNeighbour()
    {
        var pageBeforeNeighbour = _numberOfPages - (NumberOfNeighbours + 1);

        var pageNumberToStartPrintingNeighbour = pageBeforeNeighbour - 1;
        return _currentPage <= pageNumberToStartPrintingNeighbour;
    }

    private int GetLeftValue() => Math.Max(2, _currentPage - NumberOfNeighbours + 1);

    private int GetRightValue()
    {
        var thing = _numberOfPages - 1;
        var rightValue = Math.Max(_currentPage - thing, NumberOfNeighbours + 1);
        Console.WriteLine(rightValue);
        return rightValue;
    }

    private async Task ChangePage(int pageId)
    {
        pageId = pageId < 0 ? 0 : pageId;
        pageId = pageId >= _numberOfPages ? _numberOfPages - 1 : pageId;

        await OnItemClick(pageId - 1);
        _currentPage = pageId;
        StateHasChanged();
    }
}
