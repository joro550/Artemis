<div class="container">
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @GetActiveClass(1)">
                <a class="page-link" @onclick="@(async () => await ChangePage(1))">1</a>
            </li>

            @if (_numberOfPages > 1)
            {
                @if (_numberOfPages > 2)
                {
                    @if (_hasLeftSpill)
                    {
                        <li class="page-item">
                            <a class="page-link" aria-label="Previous" @onclick="@(async () => await ChangePage(_currentPage - (NumberOfNeighbours + 1)))">
                                <span aria-hidden="true">
                                    &laquo;
                                </span>
                            </a>
                        </li>
                    }

                    @foreach (var pageId in _pages)
                    {
                        <li class="page-item @GetActiveClass(pageId)">
                            <a class="page-link" @onclick="@(async () => await ChangePage(pageId))">@pageId</a>
                        </li>
                    }

                    @if (_hasRightSpill)
                    {
                        <li class="page-item">
                            <a class="page-link" aria-label="Previous" @onclick="@(async () => await ChangePage(_currentPage + (NumberOfNeighbours + 1)))">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }
                }

                <li class="page-item @GetActiveClass(_numberOfPages)">
                    <a class="page-link" @onclick="@(async () => await ChangePage(_numberOfPages))">@_numberOfPages</a>
                </li>
            }
        </ul>
    </nav>
</div>

@code {
    private int _numberOfPages;
    private int _currentPage = 1;

    private bool _hasLeftSpill;
    private bool _hasRightSpill;
    private List<int> _pages = new List<int>();

    [Parameter]
    public double ItemsPerPage { get; set; }

    [Parameter]
    public double TotalItems { get; set; }

    [Parameter]
    public int NumberOfNeighbours { get; set; }

    [Parameter]
    public Func<int, Task> OnItemClick { get; set; }

    protected override void OnInitialized()
    {
        _numberOfPages = (int)Math.Ceiling(TotalItems / ItemsPerPage);

        if(_numberOfPages > 1)
            ProcessPage();
    }

    private string GetActiveClass(int page) => _currentPage == page ? "active" : string.Empty;

    private void ProcessPage()
    {
        var maxPageNumber = _numberOfPages - 1;
        var maxNeighbours = NumberOfNeighbours * 2;

        var startPage = Math.Max(2, _currentPage - NumberOfNeighbours);
        var neighbourBuffer = _currentPage > NumberOfNeighbours + 1 ? maxNeighbours + 1 : maxNeighbours;

        var endPage = startPage + neighbourBuffer;
        var count = endPage <= maxPageNumber ? neighbourBuffer : _numberOfPages - startPage;

        _pages = Enumerable.Range(startPage, count).ToList();

        _hasLeftSpill = startPage > 2;
        _hasRightSpill = _currentPage < maxPageNumber - NumberOfNeighbours;
    }

    private async Task ChangePage(int pageId)
    {
        pageId = Math.Max(1, pageId);
        pageId = Math.Min(pageId, _numberOfPages);

        await OnItemClick(pageId - 1);
        _currentPage = pageId;

        ProcessPage();
        StateHasChanged();
    }
}
