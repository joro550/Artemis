<div class="container">
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @GetActiveClass(1)">
                <a class="page-link" href="#" @onclick="@(async () => await ChangePage(1))">1</a>
            </li>

            @if (_hasLeftSpill)
            {
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Previous" @onclick="@(async () => await ChangePage(_currentPage - (NumberOfNeighbours+1)))">
                        <span aria-hidden="true">
                            &laquo;
                        </span>
                    </a>
                </li>
            }

            @foreach (var pageId in _pages)
            {
                <li class="page-item @GetActiveClass(pageId)">
                    <a class="page-link" href="#" @onclick="@(async () => await ChangePage(pageId))">@pageId</a>
                </li>
            }

            @if (_hasRightSpill)
            {
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Previous" @onclick="@(async () => await ChangePage(_currentPage + (NumberOfNeighbours+1)))">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            }

            <li class="page-item @GetActiveClass(_numberOfPages)">
                <a class="page-link" href="#" @onclick="@(async () => await ChangePage(_numberOfPages))">@_numberOfPages</a>
            </li>
        </ul>
    </nav>
</div>

@code {
    private int _numberOfPages;
    private int _currentPage = 1;

    private bool _hasLeftSpill;
    private bool _hasRightSpill;
    private List<int> _pages = new List<int>();

    [Parameter]
    public double ItemsPerPage { get; set; }

    [Parameter]
    public double TotalItems { get; set; }

    [Parameter]
    public int NumberOfNeighbours { get; set; }

    [Parameter]
    public Func<int, Task> OnItemClick { get; set; }

    protected override void OnInitialized()
    {
        _numberOfPages = (int) Math.Ceiling(TotalItems / ItemsPerPage);
        ProcessPage();
    }

    private string GetActiveClass(int page) => _currentPage == page ? "active" : string.Empty;

    private void ProcessPage()
    {
        var pageBuffer = _numberOfPages;
        var neighbourBuffer = _currentPage > NumberOfNeighbours ? NumberOfNeighbours * 2 + 1 : NumberOfNeighbours * 2;
        var startPage = _currentPage > pageBuffer - neighbourBuffer ? pageBuffer - neighbourBuffer : Math.Max(2, _currentPage - NumberOfNeighbours);

        _pages = Enumerable.Range(startPage, neighbourBuffer).ToList();

        _hasLeftSpill = startPage > 2;
        _hasRightSpill = _currentPage < pageBuffer - neighbourBuffer;
    }

    private async Task ChangePage(int pageId)
    {
        pageId = Math.Max(1, pageId);
        pageId = Math.Min(pageId, _numberOfPages);

        await OnItemClick(pageId - 1);
        _currentPage = pageId;

        ProcessPage();
        StateHasChanged();
    }
}
