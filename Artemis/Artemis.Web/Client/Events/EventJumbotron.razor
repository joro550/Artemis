@using Artemis.Web.Shared.Events
@using Artemis.Web.Shared.Subscriptions

@inject NavigationManager Navigation
@inject HttpClientAdapter HttpClientAdapter

@if (Event != null)
{
    <section class="jumbotron text-center">
        <div class="container">
            <h1>@Event.Name</h1>
            <p class="lead text-muted">@Event.Description</p>
            @if (DisplayCallToAction && _canUserSubscribe)
            {
                <AuthorizeView>
                    <p>
                        <button @onclick="@(async () => await CreateEventBasedSubscription())" class="btn btn-primary my-2">Subscribe to updates</button>
                    </p>
                </AuthorizeView>
            }
        </div>
    </section>
}
else
{
    <section class="jumbotron text-center">
        <div class="container">
            <h1><em>Please Wait</em></h1>
            <p class="lead text-muted">...</p>
        </div>
    </section>
}

@code {
    [Parameter]
    public Event Event { get; set; }

    [Parameter]
    public bool DisplayCallToAction { get; set; }

    private bool _canUserSubscribe;

    protected override async Task OnInitializedAsync()
    {
        _canUserSubscribe = await HttpClientAdapter.GetJsonAsync<bool>("/api/user/permission/subscribe");
    }

    private async Task CreateEventBasedSubscription()
    {
        var tokenResult = await HttpClientAdapter.CanGetToken2();
        if (tokenResult.Success)
        {
            await HttpClientAdapter.PostJsonAsync<EventSubscriptionResult>("/api/subscription/location", 
                new EventSubscriptionRequest { EventId = Event.Id });
        }
        else
        {
            Navigation.NavigateTo(tokenResult.Token.RedirectUrl);
        }
    }
}
