@page "/organization/{OrganizationId:int}/events/{eventId:int}"

@using Artemis.Web.Client.Users
@using Artemis.Web.Shared.Events
@using Artemis.Web.Shared.EventUpdates

@inject HttpClientAdapter Client
@inject UserUtilities UserUtilities

<BreadcrumbView OrganizationId="OrganizationId" EventId="EventId" />
<AuthorizeView>
    @if (_isEmployee)
    {
        <a class="btn btn-primary" href="/organization/@OrganizationId/events/@EventId/update/create">Create Update</a>
    }
</AuthorizeView>
<EventJumbotron Event="_event" DisplayCallToAction="true" />

@if (_eventUpdates == null)
{
    <p><em>Loading...</em></p>
}
else if (!_eventUpdates.Any())
{
    <p><em>This event currently have no updates</em></p>
}
else
{
    foreach (var update in _eventUpdates)
    {
        <EventUpdateCard Model="update" OrganizationId="OrganizationId" />
    }
}

@code {
    [Parameter]
    public int OrganizationId { get; set; }

    [Parameter]
    public int EventId { get; set; }

    private Event _event;
    private bool _isEmployee;
    private EventUpdate[] _eventUpdates;

    protected override async Task OnInitializedAsync()
    {
        _event = await Client.GetJsonAsync<Event>($"/api/organization/{OrganizationId}/event/{EventId}");
        _eventUpdates = await Client.GetJsonAsync<EventUpdate[]>($"/api/organization/{OrganizationId}/event/{EventId}/update");

        _isEmployee = await UserUtilities.IsEmployeeOfOrganization(OrganizationId);
    }
}
