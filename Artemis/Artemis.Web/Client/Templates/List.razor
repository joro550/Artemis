@page "/organization/{OrganizationId:int}/templates/list"
@page "/organization/{OrganizationId:int}/templates"

@using Artemis.Web.Shared.Organizations
@using Microsoft.AspNetCore.Authorization
@using Artemis.Web.Shared.MessageTemplates
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthenticationService

@attribute [Authorize]

<BreadcrumbView OrganizationId="OrganizationId" />
<AuthorizeView>
    <a class="btn btn-primary" href="/organizations/@OrganizationId/template/create">Create</a>
</AuthorizeView>
<hr />
<OrgJumbotron Organization="@_organization" DisplayCallToAction="false" />

<h3>Templates</h3>
@if (_templates == null)
{
    <p><em>Loading...</em></p>
}
else if (!_templates.Any())
{
    <p><em>We didn't seem to find anything</em></p>
}
else
{
    <div class="row">
        @foreach (var template in _templates)
        {
            <div class="col-md-4">
                <div class="card mb-4 shadow-sm">
                    <div class="card-header">@template.Name</div>
                    <div class="card-body">
                        <p class="card-text">@template.Text</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <a href="/organizations/@OrganizationId/template/edit/@template.Id" class="btn btn-sm btn-outline-secondary">Edit</a>
                            </div>
                        </div>
                        <small class="text-muted">@template.MessageEvent</small>
                    </div>
                </div>
            </div>
        }
    </div>
}



@code {
    [Parameter]
    public int OrganizationId { get; set; }

    private Organization _organization;
    private MessageTemplate[] _templates;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = new HttpClient { BaseAddress = new Uri(Navigation.BaseUri) };

        var tokenResult = await AuthenticationService.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token.Value}");
            _organization = await httpClient.GetJsonAsync<Organization>($"api/organization/{OrganizationId}");
            _templates = await httpClient.GetJsonAsync<MessageTemplate[]>($"api/organization/{OrganizationId}/template");
        }
        else
        {
            Navigation.NavigateTo("organizations");
        }
    }
}
