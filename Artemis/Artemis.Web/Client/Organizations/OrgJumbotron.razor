@using System.Threading
@using Artemis.Web.Shared.Organizations
@using Artemis.Web.Shared.Subscriptions
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject HttpClientAdapter HttpClientAdapter
@inject NavigationManager Navigation

@if (Organization != null)
{
    if (_displayToast)
    {
        <div aria-live="polite" aria-atomic="true" style="position: relative; min-height: 200px;">
            <div class="toast" style="position: absolute; top: 0; right: 0;">
                <div class="toast-header">
                    <span class="rounded mr-2"></span>
                    <strong class="mr-auto">Subscription</strong>
                    <small>11 mins ago</small>
                    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="toast-body">
                    Subscription created successfully
                </div>
            </div>
        </div>
    }

    <section class="jumbotron text-center">
        <div class="container">
            <h1>@Organization.Name</h1>
            <p class="lead text-muted">@Organization.Description</p>
            @if (DisplayCallToAction && _canUserSubscribe)
            {
                <AuthorizeView>
                    <p>
                        <button @onclick="@(async () => await CreateLocationBasedSubscription())" class="btn btn-primary my-2">Subscribe to specific area</button>
                        <button @onclick="@(async () => await CreateOrganizationBasedSubscription())" class="btn btn-secondary my-2">Subscribe to all events</button>
                    </p>
                </AuthorizeView>
            }
        </div>
    </section>
}
else
{
    <section class="jumbotron text-center">
        <div class="container">
            <h1><em>Please Wait</em></h1>
            <p class="lead text-muted">...</p>
        </div>
    </section>
}

@code {
    [Parameter]
    public Organization Organization { get; set; }

    [Parameter]
    public bool DisplayCallToAction { get; set; }

    private Timer _timer;
    private bool _displayToast;
    private bool _canUserSubscribe;

    protected override async Task OnInitializedAsync()
    {
        _canUserSubscribe = await HttpClientAdapter.GetJsonAsync<bool>("/api/user/permission/subscribe");
    }

    private async Task CreateLocationBasedSubscription()
    {
        var tokenResult = await HttpClientAdapter.CanGetToken2();

        if (tokenResult.Success)
        {
            var result = await HttpClientAdapter.PostJsonAsync<LocationSubscriptionResult>("/api/subscription/location",
                    new LocationSubscriptionRequest {OrganizationId = Organization.Id});

            if (result.Success)
            {
                _displayToast = true;
                SetUpTimer();
            }
        }
        else
        {
            Navigation.NavigateTo(tokenResult.Token.RedirectUrl);
        }
    }

    private async Task CreateOrganizationBasedSubscription()
    {

        var tokenResult = await HttpClientAdapter.CanGetToken2();
        if (tokenResult.Success)
        {
            var result = await HttpClientAdapter.PostJsonAsync<OrganizationSubscriptionResult>("/api/subscription/organization",
                new OrganizationSubscriptionRequest { OrganizationId = Organization.Id });

            if (result.Success)
            {
                _displayToast = true;
                SetUpTimer();
            }
        }
        else
        {
            Navigation.NavigateTo(tokenResult.Token.RedirectUrl);
        }
    }

    private void SetUpTimer()
    {
        if (_timer == null)
        {
            _timer = new Timer((o) =>
            {
                _displayToast = false;
                StateHasChanged();
                _timer.Dispose();
                _timer = null;
            }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
        }
    }
}
