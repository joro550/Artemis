@using Artemis.Web.Shared.Organizations
@using Artemis.Web.Shared.Subscriptions
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthenticationService

@if (Organization != null)
{
    <section class="jumbotron text-center">
        <div class="container">
            <h1>@Organization.Name</h1>
            <p class="lead text-muted">@Organization.Description</p>
            @if (DisplayCallToAction)
            {
                <AuthorizeView>
                    <p>
                        <button @onclick="@(async () => await CreateLocationBasedSubscription())" class="btn btn-primary my-2">Subscribe to specific area</button>
                        <button @onclick="@(async () => await CreateOrganizationBasedSubscription())" class="btn btn-secondary my-2">Subscribe to all events</button>
                    </p>
                </AuthorizeView>
            }
        </div>
    </section>
}
else
{
    <section class="jumbotron text-center">
        <div class="container">
            <h1><em>Please Wait</em></h1>
            <p class="lead text-muted">...</p>
        </div>
    </section>
}

@code {
    [Parameter]
    public Organization Organization { get; set; }

    [Parameter]
    public bool DisplayCallToAction { get; set; }

    public async Task CreateLocationBasedSubscription()
    {
        var httpClient = new HttpClient { BaseAddress = new Uri(Navigation.BaseUri) };
        var tokenResult = await AuthenticationService.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token.Value}");
            await httpClient.PostAsync("/api/subscription/location", new MultipartContent());
        }
        else
        {
            Navigation.NavigateTo(tokenResult.RedirectUrl);
        }
    }

    public async Task CreateOrganizationBasedSubscription()
    {
        var httpClient = new HttpClient { BaseAddress = new Uri(Navigation.BaseUri) };
        var tokenResult = await AuthenticationService.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token.Value}");
            await httpClient.PostJsonAsync("/api/subscription/organization", new OrganizationSubscriptionRequest{ OrganizationId = Organization.Id });
        }
        else
        {
            Navigation.NavigateTo(tokenResult.RedirectUrl);
        }
    }
}
