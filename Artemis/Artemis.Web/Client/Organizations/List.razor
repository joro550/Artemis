@page "/"
@page "/organizations"
@page "/organizations/list"

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthenticationService

@using Artemis.Web.Shared.Employee
@using Artemis.Web.Shared.Organizations
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<h1>Organizations</h1>

@if (_orgs == null)
{
    <p><em>Loading...</em></p>
}
else if (!_orgs.Any())
{
    <p><em>We didn't seem to find anything</em></p>
}
else
{
    <div class="row">
        @foreach (var org in _orgs)
        {
            <div class="col-md-4">
                <div class="card mb-4 shadow-sm">
                    <div class="card-header">@org.Name</div>
                    <div class="card-body">
                        <p class="card-text">@org.Description</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <a href="/organization/@org.Id/events/" class="btn btn-sm btn-outline-secondary">View</a>

                                @if(_employeeStatuses.Any(response => response.OrganizationId == org.Id))
                                {
                                    <a href="/organization/@org.Id/templates" class="btn btn-sm btn-outline-secondary">Message templates</a>
                                    <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<AuthorizeView>
    <a class="btn btn-primary" href="/organizations/create">Create</a>
</AuthorizeView>

@code {
    private Organization[] _orgs;
    private EmployeeStatusResponse[] _employeeStatuses;

    protected override async Task OnInitializedAsync()
    {
        _orgs = await Http.GetJsonAsync<Organization[]>("api/Organization");

        var tokenResult = await AuthenticationService.RequestAccessToken();

        if (_orgs.Any() && tokenResult.TryGetToken(out var token))
        {
            var httpClient = new HttpClient { BaseAddress = new Uri(Navigation.BaseUri) };
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token.Value}");

            _employeeStatuses = await httpClient.GetJsonAsync<EmployeeStatusResponse[]>("api/employee/status");
        }
        else
        {
            _employeeStatuses = new EmployeeStatusResponse[0];
        }
    }
}